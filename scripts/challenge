#!/usr/bin/env node
const fs = require("fs");
const path = require("path");

const handleError = (err) => {
  if (err) {
    console.log(err);
    process.exit(1);
  }
};

const readFileSync = (name) => {
  return fs.readFileSync(path.join(__dirname, name)).toString();
};

const mkdir = (targetDirectory) => {
  return new Promise((resolve, reject) => {
    fs.mkdir(targetDirectory, { recursive: true }, (err) => {
      if (err) {
        reject(err);
        return;
      }

      console.log(`Created '${targetDirectory}'`);

      resolve(targetDirectory);
    });
  });
};

const writeFile = (targetDirectory, data) => {
  return new Promise((resolve, reject) => {
    fs.writeFile(path.join(process.cwd(), targetDirectory), data, (err) => {
      if (err) {
        reject(err);
        return;
      }

      console.log(`Created '${targetDirectory}'`);

      resolve(targetDirectory);
    });
  });
};

const createChallengeFiles = (targetDirectory) => {
  const fileName = path.basename(targetDirectory);
  const testDirectory = path.join(targetDirectory, "specs");
  const indexTemplate = readFileSync("index.template");
  const challengeTemplate = readFileSync("challenge.template");
  const testTemplate = readFileSync("test.template");
  const readmeTemplate = readFileSync("readme.template");

  return mkdir(targetDirectory)
    .then(() => {
      return Promise.all([
        writeFile(
          path.join(targetDirectory, `${fileName}.js`),
          challengeTemplate
        ),
        writeFile(
          path.join(targetDirectory, "index.js"),
          indexTemplate.replace("${fileName}", fileName)
        ),
        writeFile(path.join(targetDirectory, "README.md"), readmeTemplate),
      ]);
    })
    .then(() => {
      return mkdir(testDirectory);
    })
    .then(() => {
      return writeFile(
        path.join(testDirectory, `${fileName}.spec.js`),
        testTemplate
      );
    })
    .then(() => {
      return Promise.all([
        mkdir(path.join(testDirectory, "input")),
        mkdir(path.join(testDirectory, "output")),
      ]);
    })
    .then(() => {
      return Promise.all([
        writeFile(path.join(testDirectory, "input", "00.txt"), ""),
        writeFile(path.join(testDirectory, "output", "00.txt"), ""),
      ]);
    })
    .catch(handleError);
};

// Script Process
// ==================================================

createChallengeFiles(process.argv[2]);
